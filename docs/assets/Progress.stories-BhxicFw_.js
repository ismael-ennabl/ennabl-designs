import{r as v,j as i}from"./iframe-LWRVmnFj.js";import{c as I}from"./index-wRcYn_xB.js";import{P as f}from"./index-gdvdVdh-.js";import{c as y}from"./utils-CBfrqCZ4.js";import"./preload-helper-D9Z9MdNV.js";import"./index-CABtAXQK.js";import"./index-DPcGnTxN.js";var d="Progress",c=100,[E,k]=I(d),[j,D]=E(d),g=v.forwardRef((r,e)=>{const{__scopeProgress:n,value:o=null,max:a,getValueLabel:h=R,..._}=r;(a||a===0)&&!p(a)&&console.error(w(`${a}`,"Progress"));const t=p(a)?a:c;o!==null&&!m(o,t)&&console.error(M(`${o}`,"Progress"));const s=m(o,t)?o:null,$=u(s)?h(s,t):void 0;return i.jsx(j,{scope:n,value:s,max:t,children:i.jsx(f.div,{"aria-valuemax":t,"aria-valuemin":0,"aria-valuenow":u(s)?s:void 0,"aria-valuetext":$,role:"progressbar","data-state":N(s,t),"data-value":s??void 0,"data-max":t,..._,ref:e})})});g.displayName=d;var x="ProgressIndicator",P=v.forwardRef((r,e)=>{const{__scopeProgress:n,...o}=r,a=D(x,n);return i.jsx(f.div,{"data-state":N(a.value,a.max),"data-value":a.value??void 0,"data-max":a.max,...o,ref:e})});P.displayName=x;function R(r,e){return`${Math.round(r/e*100)}%`}function N(r,e){return r==null?"indeterminate":r===e?"complete":"loading"}function u(r){return typeof r=="number"}function p(r){return u(r)&&!isNaN(r)&&r>0}function m(r,e){return u(r)&&!isNaN(r)&&r<=e&&r>=0}function w(r,e){return`Invalid prop \`max\` of value \`${r}\` supplied to \`${e}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${c}\`.`}function M(r,e){return`Invalid prop \`value\` of value \`${r}\` supplied to \`${e}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${c} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var S=g,V=P;function b({className:r,value:e,...n}){return i.jsx(S,{"data-slot":"progress",className:y("bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",r),...n,children:i.jsx(V,{"data-slot":"progress-indicator",className:"bg-primary h-full w-full flex-1 transition-all",style:{transform:`translateX(-${100-(e||0)}%)`}})})}b.__docgenInfo={description:"",methods:[],displayName:"Progress"};const F={title:"Design Tokens/Progress",component:b,parameters:{layout:"centered"},tags:["autodocs"]},l={args:{value:66}};l.parameters={...l.parameters,docs:{...l.parameters?.docs,source:{originalSource:`{
  args: {
    value: 66
  }
}`,...l.parameters?.docs?.source}}};const U=["Default"];export{l as Default,U as __namedExportsOrder,F as default};
